#!/usr/bin/env python3

import json
import locale
import sys
import os

from collections import defaultdict
import reports
import emails
#from emails import generate as email_generate
#from emails import send as email_send


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item
    # TODO: also handle max sales
    item_sales = 0
    item_sales = item["total_sales"]
    if item_sales > max_sales["sales"]:
        item["sales"] = item_sales
        max_sales["sales"] = item_sales
        max_sales = item


  # TODO: also handle most popular car_year
  sales_by_model = defaultdict(int)
  for item in data:
    sales_by_model[item["car"]["car_year"]] += item["total_sales"]

  sort_sales_by_model = sorted(sales_by_model.items(), key=lambda x: x[1], reverse=True)
  first_key = next(iter(sort_sales_by_model))  # return key, value as tuple
  print(sort_sales_by_model)



  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    "The {} had the most sales: {}".format(
      format_car(max_sales["car"]), max_sales["sales"]),
    "The most popular year was {} with {} sales".format(
              first_key[0], first_key[1]),
  ]

  return '<br/>'.join(summary)


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  report_table = cars_dict_to_table(data)
  reports.generate('/tmp/cars.pdf', "Cars report", summary, report_table)

  # TODO: send the PDF report as an email attachment
  sender = "automation@example.com"
  receiver = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"

  message = emails.generate(sender, receiver, subject, summary, "/tmp/cars.pdf")
  emails.send(message)



if __name__ == "__main__":
  main(sys.argv)
